ticrypt {
    vm {

        # Specifies licensing server driver.
		# Available: "none" | "firewalld"
		licensing-server-driver = "firewalld"

        # Specified how often to reload the server driver
		# Recommended to do once a day
		reload-freq = 24 hours

		# Uncomment the following section for firewalld-specific config
		firewalld {
			# Specifies the firewall script file to modify
			file-access = "/home/ticrypt/test-firewalld-file"
		}

        scheduling.log = true

        default-realm = "libvirt"
	interval-length = 10 minutes
        realms {
          #  example-libvirt = { include "realms/libvirt-realm.conf" }
             libvirt = { include "realms/libvirt.conf" }
          #  nutanix = { include "realms/nutanix.conf" }
        }

        cost-functions {
	    timonsterIFrac {
	        name = "timonster-immediate"
		description = "Default cost function for timonster's immediate scheduler. 120GB memory hard cap"
                offset = 10
                vcpus = { curve = "linear", slope = 1, base = 0 }
                memory = {
                    curve = "hard-soft"
                    soft = 100 GiB
                    hard = 120 GiB
                    scale = 100
                }
	    }

	    timonsterBFrac {     
               	name = "timonster-batch"
                description = "Default cost function for timonster's batch scheduler. 120GB memory hard cap, 1 gpu-nvidia"
                offset = 10
                vcpus = { curve = "linear", slope = 1, base = 0 }
                memory = {
                    curve = "hard-soft"
                    soft = 100 GiB
                    hard = 120 GiB
                    scale = 100
                }
		device.gpu-nvidia = {
                    curve = "low-high"
                    cutoff = 1
                    low = { curve = "linear", slope = 1, base = 0 }
                    high = { curve = "invalid" }
                }
            }

            timonsterCF {
                name = "timonster"
                description = "Default cost function for timonster. 240GB memory hard cap, 1 gpu-nvidia"
                offset = 10
                vcpus = { curve = "linear", slope = 1, base = 0 }
                memory = {
                    curve = "hard-soft"
                    soft = 192 GiB
                    hard = 240 GiB
                    scale = 100
                }
                device.gpu-nvidia = {
                    curve = "low-high"
                    cutoff = 1
                    low = { curve = "linear", slope = 1, base = 0 }
                    high = { curve = "invalid" }
                }
		device.gpu-nonexistent = {
		    curve = "low-high"
		    cutoff = 1
		    low = { curve = "linear", slope = 1, base = 0 }
		    high = { curve = "invalid" }
		}
            }

            reservedCF {
                name = "reserved host"
                description = "Cost function for reserved hosts"
                offset = 100
                vcpus = { curve = "linear", slope = 1, base = 0 }
                memory = {
                    curve = "hard-soft"
                    soft = 16 GiB
                    hard = 32 GiB
                    scale = 100
                }
            }
        }

        hardware-profiles {
            timonsterHP {
                name = "timonster"
                description = "Hardware profile for timonster"
                cores = 32
                memory = 256 GiB
                devices = [
                    { type: "gpu-nvidia", addr: "04:00.0" },
		            { type: "gpu-nonexistent", addr: "26:00.1" },
                    { type: "webcam", kind: "usb", addr: "23c5:1478"}
                ]
                cost-function = "timonsterCF"
                xml = """<title>Test</title>
<description>Description Override</description>
"""
            }

	    timonsterIHP {
                name = "timonster-immediate"
                description = "Hardware profile for timonster's immediate scheduler"
                cores = 28
                memory = 192 GiB
                devices = [
		    { type: "gpu-nvidia", addr: "04:00.0" },
                    { type: "gpu-nonexistent", addr: "26:00.1" },
                    { type: "webcam", kind: "usb", addr: "23c5:1478"}
                ]
                cost-function = "timonsterIFrac"
            }

	    timonsterBHP {
                name = "timonster-batch"
                description = "Hardware profile for timonster's batch scheduler"
                cores = 16
                memory = 128 GiB
                devices = [
                    { type: "gpu-nvidia", addr: "04:00.0" },
                    { type: "gpu-nonexistent", addr: "26:00.1" }
                ]
                cost-function = "timonsterBFrac"
            }

            reservedHP {
                name = "reserved host"
                description = "Hardware profile for reserved hosts"
                cores = 4
                memory = 32 GiB
                devices = [ ]
                cost-function = "reservedCF"
            }
        }
	hardware-devices {
		gpu-nvidia {
        		name = "Nvidia Tesla T80"
        		description = "New Nvidia cards that are the best"
    		}

		nvidia-gpu {
        		name = "Nvidia Tesla T40"
        		description = "Old Nvidia cards that are obsolete"
    		}

    		GTX-2080 {
        		name = "Nvidia GeForce GTX 2080"
        		description = "Top of the line gaming card"
		}
	}
        bricks {
            #r-brick = { include "bricks/r.conf" }
            #ubuntu-brick = { include "bricks/ubuntu.conf" }
            busybox-brick = { include "bricks/busybox.conf" }
            ubuntu-xfce-vnc = { include "bricks/ubuntu-xfce-vnc.conf" }

            multipurpose = { include "bricks/multipurpose.conf" }
            r-studio-brick = { include "bricks/r-studio.conf" }
            r-studio-test = {
                include "bricks/r-studio.conf"

                name = "R Studio TESTING"
                description = "R Studio development environment, testing version"
                image.volume = "ti-rstudio-1.1.0.img"
            }
            r-studio-postgres = { include "bricks/r-studio-postgres.conf" }

	    windows = { include "bricks/windows.conf" }
        windows10-new = { include "bricks/windows-newvmc.conf" }
            #xenial-cuda = { include "bricks/xenial-cuda.conf" }
            xenial-cuda-debug = {
                include "bricks/xenial-cuda.conf"
                name = "Xenial CUDA (debug)"
                pty = true
            }
	    xenial-nodocker = { include "bricks/ubuntu-xenial-nodocker.conf" }
	    artful-nodocker = { include "bricks/ubuntu-artful-nodocker.conf" }
        #centos-7-nodocker = { include "bricks/centos-7-nodocker.conf" }
        centos-7-new-vmc = { include "bricks/centos-7-new-vmc.conf" }
        ntx-centos-7 = { include "bricks/ntx-centos-7.conf" }
        } # bricks

        accounts {
            name-from-email-extractors = [
                { regex = "([^@]+)@terainsights\\.\\w+", sub = "$1" },
                { regex = "([^@]+)@.*", sub = "$0" }
            ]
        } # accounts

        ssl-config {
            trustManager = {
                stores = [
                    { path: "/home/ticrypt/ssl/certs/nutanixlocal.crt", type: "PEM" }, # Nutanix SSL cert
                    { path: "/etc/pki/ca-trust/extracted/java/cacerts", type: "JKS" } # Default trust store
                ]
            }
        } # ssl-config
	akka.http.client.parsing {
            cookie-parsing-mode = raw
            ignore-illegal-header-for = [ 'Set-Cookie' ]
            illegal-header-warnings = off
        } # akka.http.client.parsing

    } # vm
} # ticrypt

ticrypt.vm.akka.loglevel = "INFO"
ticrypt.vm.akka.loggers = ["akka.event.slf4j.Slf4jLogger"]
ticrypt.heartbeat.auto-reconnect = true

