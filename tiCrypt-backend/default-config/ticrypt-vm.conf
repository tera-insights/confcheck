###################################
# ticrypt-auth Configuration File #
###################################

ticrypt.vm {
  # Specifies licensing server driver.
		# Available: "none" | "firewalld"
		licensing-server-driver = "none"

		# Specified how often to reload the server driver
		# Recommended to do once a day
		reload-freq = 24 hours

    # Specified how often to check each realm's drives and VMs
		# Recommended to do frequently. If undefined, the systematic check does not occur.
		# realm-check-freq = 1 hours

		# Uncomment the following section for firewalld-specific config
		# firewalld {
		#	# Specifies the firewall script file to modify
		# 	file-access = "/home/ticrypt/test-file"
		# }

		# Limits for the VMCHistory, VMHistory, and VMLogs
		history.default-limit = 20
		history.max-limit = 50

		# Sets debug level.
		# 0 - No debug
		# 1 - Low-level debug statements
		# 2 - High-level debug statements
		debug-level = 0
  
  mongodb {
    ## The name of the database in which data will be stored.
    #database = "ticrypt-vm"

    ## You may EITHER specify the uri OR the components
    ## If specified, the URI will be used instead of the components

    #uri = "mongodb://user:password@localhost:27017/${database}"

    #hostname = "localhost"
    #port = 27017
    #user = "user"
    #password = "password"
  }

  ## This section allows you to define named cost functions, which can be
  ## referenced in host definitions.
  cost-functions {
    ## An basic example that supports a hard limit of 32 VPUs and 64 GiB of
    ## memory used by VMs, with costs increasing after 16 VPUs and 32 GiB
    ## of memory.
    example {
      ## Factor by which to scale output of cost function. If 1.0 or not
      ## given, no scaling is performed.
      scale: 1.0

      ## Added cost depending on the number of VMs running on the host.
      vms: { curve: "linear", slope: 1, base: 0 }

      ## Added cost depending on the number of virtual CPUs allocated to VMs.
      vcpus: { curve: "soft-hard", soft: 16, hard: 32 }

      ## Added cost based on amount of memory allocated to VMs.
      memory: { curve: "soft-hard", soft: 32 GiB, hard: 64 GiB, scale: 10 }
    }

    ## Make a copy of the cost function "example" and change its scale
    example-scaled: ${ticrypt.vm.cost-functions.example}
    example-scaled.scale: 5.0

    example-with-gpu {
      scale: 100
      vms: { curve: "linear", slope: 1, base: 0 }
      vcpus: { curve: "soft-hard", soft: 16, hard: 32 }
      memory: { curve: "soft-hard", soft: 32 GiB, hard: 64 GiB, scale: 10 }

      ## Add a curve for the "gpu-nvidia" device type, which will allow VMs
      ## requiring that device to be scheduled on hosts with this cost
      ## function.
      ##
      ## It is important to use the "max" parameter (or the
      ## "hard" parameter of the "hard-soft" curve) to set the maximum
      ## number of these devices that can be given to VMs.
      devices.gpu-nvidia: { curve: "linear", slope: 1, base: 0, max: 2 }
    }
  }

  # Realm configurations, mapping of ID -> settings
  realms {
    example-libvirt-realm = { include "realms/example-libvirt-realm.conf" }
  }

  # ID of default realm.
  # If specified, the specified realm will be used when a realm is not explicitly
  # given in requests (e.g. creating drives).
  # This allows for backwards compatiblity with clients that do not understand realms.
  default-realm = "example-libvirt-realm"

  ## Sets the host interface upon which the service listen for connections
  ## from the other services.
  #akka.remote.artery.canonical.hostname = "127.0.0.1"

  ## Sets the port used for remote connections to other services.
  #akka.remote.artery.canonical.port = 2560
}

ticrypt.auth {
  ## Sets the hostname, and port used by the Authentication
  ## service. Must be set properly for proper communcation with the
  ## authentication service.
  #hostname = "127.0.0.1"
  #port = 2552
}